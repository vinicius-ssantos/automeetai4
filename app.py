
#!/usr/bin/env python
"""
AutoMeetAI - Interface Web com Streamlit

Este script implementa uma interface web para o AutoMeetAI utilizando Streamlit.
Permite que os usu√°rios:
1. Carreguem arquivos de v√≠deo
2. Configurem par√¢metros de transcri√ß√£o
3. Obtenham transcri√ß√µes com identifica√ß√£o de falantes
4. Gerem resumos e an√°lises das reuni√µes

Uso:
    streamlit run app.py
"""

import streamlit as st
import uuid
import os
import tempfile
from typing import Dict, Any, Optional

from annotated_text import annotated_text

from src.factory import AutoMeetAIFactory
from src.utils.logging import get_logger, configure_logger
from src.exceptions import AutoMeetAIError

# Inicializa o logger para este m√≥dulo
logger = get_logger(__name__)

# Configura o logger raiz
configure_logger()

# Tenta obter as chaves de API do Streamlit Secrets, com fallback para user_preferences.json
from src.config.user_preferences_provider import UserPreferencesProvider

# Inicializa o provedor de prefer√™ncias do usu√°rio
user_prefs = UserPreferencesProvider()

# Tenta obter as chaves de API do Streamlit Secrets
try:
    aai_api_key = st.secrets['assemblyai']['api_key']
    openai_api_key = st.secrets['openai']['api_key']
    logger.info("API keys obtidas do Streamlit Secrets")
except Exception as e:
    # Fallback para user_preferences.json
    logger.info(f"N√£o foi poss√≠vel obter API keys do Streamlit Secrets: {e}")
    logger.info("Tentando obter API keys de user_preferences.json")

    aai_api_key = user_prefs.get('assemblyai_api_key')
    openai_api_key = user_prefs.get('openai_api_key')

    if not aai_api_key or not openai_api_key:
        st.error("API keys n√£o encontradas. Configure-as no arquivo user_preferences.json ou no Streamlit Secrets.")
        logger.error("API keys n√£o encontradas em user_preferences.json")
        st.stop()

    logger.info("API keys obtidas de user_preferences.json")


# C√≥digos de idioma suportados pelo servi√ßo de transcri√ß√£o
language_codes = {
    "Portuguese": "pt",          # Portugu√™s
    "Global English": "en",      # Ingl√™s Global
    "Australian English": "en_au", # Ingl√™s Australiano
    "British English": "en_uk",  # Ingl√™s Brit√¢nico
    "Spanish": "es",             # Espanhol
    "US English": "en_us",       # Ingl√™s Americano
    "French": "fr",              # Franc√™s
    "German": "de",              # Alem√£o
    "Italian": "it",             # Italiano
    "Dutch": "nl",               # Holand√™s
    "Hindi": "hi",               # Hindi
    "Japanese": "ja",            # Japon√™s
    "Chinese": "zh",             # Chin√™s
    "Finnish": "fi",             # Finland√™s
    "Korean": "ko",              # Coreano
    "Polish": "pl",              # Polon√™s
    "Russian": "ru",             # Russo
    "Turkish": "tr",             # Turco
    "Ukrainian": "uk",           # Ucraniano
    "Vietnamese": "vi"           # Vietnamita
}




st.title('ü§ñ AutomeetAI')

prompt_system = st.text_area("Forne√ßa instru√ß√µes gerais ou estabele√ßa o tom para o \"assistente\" de IA:", "Voc√™ √© um √≥timo gerente de projetos com grandes capacidades de cria√ß√£o de atas de reuni√£o.")

prompt_text = st.text_area("O que o usu√°rio deseja que o assistente fa√ßa?", """Em uma reda√ß√£o de n√≠vel especializado, resuma as notas da reuni√£o em um √∫nico par√°grafo.
Em seguida, escreva uma lista de cada um de seus pontos-chaves tratados na reuni√£o.
Por fim, liste as pr√≥ximas etapas ou itens de a√ß√£o sugeridos pelos palestrantes, se houver.""")

st.divider()


col21, col22 = st.columns(2)


with col21:
	speakers_expected = st.number_input("Total de pessoas falantes:", 1, 15)

with col22:
	language = st.selectbox("Selecione o idioma falado:", tuple(language_codes.keys()))


uploaded_file = st.file_uploader("Selecione o seu arquivo", accept_multiple_files=False, type=['mp4'])


st.divider()




if uploaded_file:
    try:
        # Cria uma inst√¢ncia do AutoMeetAI usando a f√°brica
        factory = AutoMeetAIFactory()
        app = factory.create(
            assemblyai_api_key=aai_api_key,
            openai_api_key=openai_api_key,
            include_text_generation=True,
            use_cache=True
        )

        # Salva o arquivo carregado em um arquivo tempor√°rio
        with st.spinner('Preparando o arquivo de v√≠deo...'):
            # Cria um arquivo tempor√°rio para o v√≠deo
            temp_dir = tempfile.mkdtemp()
            mp4_filename = os.path.join(temp_dir, uploaded_file.name)

            # Salva o conte√∫do do arquivo carregado no arquivo tempor√°rio
            with open(mp4_filename, 'wb') as f:
                f.write(uploaded_file.read())

            logger.info(f"Arquivo de v√≠deo salvo temporariamente em: {mp4_filename}")

        # Configura as op√ß√µes de transcri√ß√£o
        transcription_config = {
            "speaker_labels": True,
            "speakers_expected": speakers_expected,
            "language_code": language_codes[language]
        }

        # Processa o v√≠deo (converte para √°udio e transcreve)
        with st.spinner('Processando o v√≠deo (convertendo e transcrevendo)...'):
            # Define uma fun√ß√£o de callback para mostrar o progresso
            def progress_callback(stage, current, total):
                # Atualiza a mensagem de progresso no Streamlit
                progress_text = f"{stage} ({int(current)}/{int(total)})"
                st.text(progress_text)

            # Processa o v√≠deo
            transcription = app.process_video(
                video_file=mp4_filename,
                transcription_config=transcription_config,
                save_audio=False,
                progress_callback=progress_callback
            )

            if not transcription:
                st.error("Falha ao processar o v√≠deo. Verifique o arquivo e tente novamente.")
                logger.error("Falha ao processar o v√≠deo")
                st.stop()

            st.success("V√≠deo processado e transcrito com sucesso!")

            # Prepara o texto transcrito e os dados para anota√ß√£o
            texto_transcrito = ''
            texto_anotado = []

            for utterance in transcription.utterances:
                texto_transcrito += f"Speaker {utterance.speaker}: {utterance.text}\n"
                texto_anotado.append((utterance.text, f"Speaker {utterance.speaker}"))

        # Gera a an√°lise da transcri√ß√£o
        with st.spinner('Gerando ata de reuni√£o...'):
            # Prepara o prompt para an√°lise
            user_prompt_template = prompt_text + "\n===========\n{transcription}"

            # Gera a an√°lise
            texto_retorno = app.analyze_transcription(
                transcription=transcription,
                system_prompt=prompt_system,
                user_prompt_template=user_prompt_template
            )

            if not texto_retorno:
                st.error("Falha ao gerar a ata da reuni√£o.")
                logger.error("Falha ao gerar a ata da reuni√£o")
                st.stop()

            st.success("Ata gerada com sucesso!")

        # Exibe os resultados
        st.subheader('Transcri√ß√£o original')
        annotated_text(texto_anotado)

        st.subheader('Ata gerada')
        st.markdown(texto_retorno)

        # Limpa os arquivos tempor√°rios
        try:
            import shutil
            shutil.rmtree(temp_dir)
            logger.info(f"Diret√≥rio tempor√°rio removido: {temp_dir}")
        except Exception as e:
            logger.warning(f"N√£o foi poss√≠vel remover o diret√≥rio tempor√°rio: {e}")

    except AutoMeetAIError as e:
        # Exibe mensagens de erro amig√°veis para o usu√°rio
        st.error(f"Erro: {e.get_user_friendly_message()}")
        logger.error(f"AutoMeetAIError: {e}")

    except Exception as e:
        # Trata outros erros inesperados
        st.error(f"Ocorreu um erro inesperado: {e}")
        logger.error(f"Erro inesperado: {e}", exc_info=True)
